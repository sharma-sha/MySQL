-- Amazon-themed MySQL assignment
-- 1) List all customers who have made purchases of more than $80

SELECT Users.name, Users.email, SUM(Orders.total_amount) AS total_spent
FROM Users
JOIN Orders ON Users.user_id = Orders.user_id
WHERE Orders.total_amount > 80
GROUP BY Users.name, Users.email;


-- 2) Retrieve all orders placed in the last 280 days along with the customer name and email

SELECT Users.name, Users.email, Orders.order_date, Orders.total_amount
FROM Users
JOIN Orders ON Users.user_id = Orders.user_id
WHERE Orders.order_date >= DATE_SUB(CURDATE(), INTERVAL 280 DAY);

-- 3)Find the average product price for each category.

SELECT category, AVG(price) AS average_price
FROM Products
GROUP BY category;

-- 4)List all customers who have purchased a product from the category Electronics

SELECT DISTINCT Users.name, Products.category
FROM Users
JOIN Orders ON Users.user_id = Orders.user_id
JOIN Order_Details ON Orders.order_id = Order_Details.order_id
JOIN Products ON Order_Details.product_id = Products.product_id
WHERE Products.category = 'Electronics';


-- 5)Find the total number of products sold and the total revenue generated for each product.

SELECT Products.name, 
       SUM(Order_Details.quantity) AS total_quantity_sold,
       SUM(Order_Details.quantity * Products.price) AS total_revenue
FROM Order_Details
JOIN Products ON Order_Details.product_id = Products.product_id
GROUP BY Products.name;

-- 6) Update the price of all products in the Books category, increasing it by 10% Query.

UPDATE Products
SET price = price * 1.10
WHERE category = 'Books';

SELECT * FROM Products
WHERE category = 'Books';

-- 7) Remove all orders that were placed before 2020.
-- Delete orders placed before 2020

DELETE FROM Orders
WHERE order_date < '2020-01-01';


SELECT * FROM Orders;

-- 8) Write a query to fetch the order details, including customer name, product name, and
-- quantity, for orders placed on 2024-05-01.

SELECT DISTINCT Users.name AS customer_name, Products.name AS product_name, Order_Details.quantity
FROM Users
JOIN Orders ON Users.user_id = Orders.user_id
JOIN Order_Details ON Orders.order_id = Order_Details.order_id
JOIN Products ON Order_Details.product_id = Products.product_id
WHERE Orders.order_date = '2024-05-01';

-- 9) Fetch all customers and the total number of orders they have placed

SELECT Users.name AS customer_name, Users.email, COUNT(Orders.order_id) AS total_orders
FROM Users
JOIN Orders ON Users.user_id = Orders.user_id
GROUP BY Users.name, Users.email;



-- 10) Retrieve the average rating for all products in the Electronics category.

SELECT AVG(Product_Ratings.rating) AS average_rating
FROM Products
JOIN Product_Ratings ON Products.product_id = Product_Ratings.product_id
WHERE Products.category = 'Electronics';


-- 11) List all customers who purchased more than 1 units of any product, including the product
-- name and total quantity purchased.

SELECT Users.name AS customer_name, Products.name AS product_name, SUM(Order_Details.quantity) AS total_quantity
FROM Users
JOIN Orders ON Users.user_id = Orders.user_id
JOIN Order_Details ON Orders.order_id = Order_Details.order_id
JOIN Products ON Order_Details.product_id = Products.product_id
GROUP BY Users.name, Products.name
HAVING SUM(Order_Details.quantity) > 1;

-- 12) Find the total revenue generated by each category along with the category name.

SELECT 
    P.category, 
    SUM(OD.quantity * P.price) AS total_revenue
FROM 
    Products P
JOIN 
    Order_Details OD ON P.product_id = OD.product_id
GROUP BY 
    P.category;



 